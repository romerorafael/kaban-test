// <auto-generated />
using System;
using System.Collections.Generic;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Context.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241016011429_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kanban")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Model.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasAnnotation("Npgsql:CreatedConcurrently", true);

                    b.ToTable("Boards", "kanban");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "blue",
                            Description = "Seu primeiro Quadro",
                            Icon = "board",
                            Name = "Bem Vindo"
                        });
                });

            modelBuilder.Entity("API.Model.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BoardId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<long>("ColumnId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ColumnId1")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndAt")
                        .HasColumnType("date");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("Members")
                        .HasColumnType("uuid[]");

                    b.Property<DateOnly?>("StartAt")
                        .HasColumnType("date");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("BoardId1");

                    b.HasIndex("ColumnId");

                    b.HasIndex("ColumnId1");

                    b.HasIndex("Id");

                    b.ToTable("Cards", "kanban");
                });

            modelBuilder.Entity("API.Model.Column", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BoardId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("BoardId1");

                    b.HasIndex("Id");

                    b.ToTable("Columns", "kanban");
                });

            modelBuilder.Entity("API.Model.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CardId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CardId1");

                    b.HasIndex("Id")
                        .HasAnnotation("Npgsql:CreatedConcurrently", true);

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Comments", "kanban");
                });

            modelBuilder.Entity("API.Model.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("PermissionIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Roles", "kanban");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Adiministrador do Sistema",
                            Name = "Admin",
                            PermissionIds = new List<int> { 0, 1, 2 }
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Usuário base do Sistema",
                            Name = "User",
                            PermissionIds = new List<int> { 0, 1 }
                        });
                });

            modelBuilder.Entity("API.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId1")
                        .HasColumnType("bigint");

                    b.Property<long>("UserConfigId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("Users", "kanban");
                });

            modelBuilder.Entity("API.Model.UserConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NumberOfCards")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Icon");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("UserConfig", "kanban");
                });

            modelBuilder.Entity("API.Model.Card", b =>
                {
                    b.HasOne("API.Model.Board", null)
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId1");

                    b.HasOne("API.Model.Column", null)
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Column", "Column")
                        .WithMany()
                        .HasForeignKey("ColumnId1");

                    b.Navigation("Board");

                    b.Navigation("Column");
                });

            modelBuilder.Entity("API.Model.Column", b =>
                {
                    b.HasOne("API.Model.Board", null)
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId1");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("API.Model.Comment", b =>
                {
                    b.HasOne("API.Model.Card", null)
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId1");

                    b.HasOne("API.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.User", b =>
                {
                    b.HasOne("API.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Model.UserConfig", b =>
                {
                    b.HasOne("API.Model.User", null)
                        .WithOne("UserConfig")
                        .HasForeignKey("API.Model.UserConfig", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.Board", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("API.Model.User", b =>
                {
                    b.Navigation("UserConfig");
                });
#pragma warning restore 612, 618
        }
    }
}
